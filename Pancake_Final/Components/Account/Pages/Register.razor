@page "/Account/Register"


@inject UserManager<Pancake_FinalUser> UserManager
@inject IUserStore<Pancake_FinalUser> UserStore
@inject SignInManager<Pancake_FinalUser> SignInManager
@inject IEmailSender<Pancake_FinalUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Pancake_Final.Data

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link rel="stylesheet" href="SignUp.razor.css">
</head>
 
<body>
    <div class="header">
        <div class="logo-container">
            <img class="logo" src="\images\pancakeLogo.png" alt="Logo">
            <span class="logo-text">Pancake</span>
        </div>
@*         <div class="buttons">
            <button id="premiumButton">Premium</button>
            <button id="supportButton">Support</button>
            <div class="separator"></div>
        </div> *@
    </div>
    <main>
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />

    <div class="RegisterContainer">
        <div class="RegisterContainerlogo">
            <img src="\images\pancakeLogo.png" alt="Logo" id="logo">
        </div>

        <h1>Sign Up to Start Listening</h1>

        <form action="#" method="POST" class="signup-form">
            <!-- Email Address -->
            <div class="createEmail">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Email@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
             </div>
            <!-- First Name -->
            <div class="createFirstName">
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="Brandon" />
                    <label for="email">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <!-- Last Name-->
            <div class="createLastName">
                    <InputText @bind-Value="Input.LastName" class="form-control"autocomplete="lastname" aria-required="true" placeholder="Lim" />
                    <label for="email">Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <!-- Creating Password -->
            <div class="createPassword">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Strong password ples" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="confirmPassword">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm Strong password ples" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <!-- Submit Button -->
            <button type="submit" class="btn-submit">Sign Up</button>
            <!-- Link to Log in -->
            <div class="login-link">
                Already have an account? <a href="/login" class="link">Log in here</a>.
            </div>
        </form>
    </div>
    </EditForm>
    <div class="ImageContainer">
        <img class="pancakeImg" src="images/pancakeImg1.jpg" />
    </div>
    </main>
</body>
</html>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        //create the user role if it doesn't exist
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        //add the user to the user role
        await UserManager.AddToRoleAsync(user, "User");
        //add the user id as claim when user registers
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId",
        user.Id));


        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private Pancake_FinalUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<Pancake_FinalUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Pancake_FinalUser)}'. " +
                $"Ensure that '{nameof(Pancake_FinalUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<Pancake_FinalUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Pancake_FinalUser>)UserStore;
    }

    private sealed class InputModel
    {

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";


        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
