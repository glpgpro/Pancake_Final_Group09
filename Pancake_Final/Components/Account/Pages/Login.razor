@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Pancake_Final.Data

@inject SignInManager<Pancake_FinalUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

@* <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spotify Login</title>
    <link rel="stylesheet" href="Login.razor.css">
</head> *@


<body>
    <div class="header">
        <div class="logo-container">
            <img class="logo" src="\images\pancakeLogo.png" alt="Logo">
            <span class="logo-text">Pancake</span>
        </div>
       @*  <div class="buttons">
            <button id="premiumButton">Premium</button>
            <button id="supportButton">Support</button>
            <div class="separator"></div>
        </div> *@
    </div>
    <StatusMessage Message= "@errorMessage" />
    <div class="LoginPageContainer">
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <section>
            <DataAnnotationsValidator />
            <main>
                <div class="LoginImageContainer">
                    <img class="LoginImage" src="images/pancakeImg4.jpg" />
                </div>
                 <div class="container">
                        <div class="login-container">
                            <img class="LoginContainerLogo" src="\images\pancakeLogo.png" alt="Logo">
                            <h1>Log in to Pancake</h1>
                            <form>
                            <div class = "enterEmail">
                                <label for="email" class="form-label">Email</label>
                                 <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Email@example.com" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class=" enterPassword">
                                <label for="password" class="form-label">Password</label>
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                                <button type="submit" class="login-button">Log In</button>
                            </form>
                             <div class="checkbox mb-3">
                                 <label class="form-label">
                                 <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                 <br/>
                                Remember me
                            </label>
                            </div>
                            <div class="footer">
                                <p></p>
                                <a href="#">Forgot your password?</a>
                                <p></p>
                                <br>
                                <span>Don't have an account? <a href="#">Sign up for Pancake</a></span>
                            </div>
                        </div>
                  </div>
            </main>
        </section>
        </EditForm>
    </div>
    @* </div> *@
    @* <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
</body>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
