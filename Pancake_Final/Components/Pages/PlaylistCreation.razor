@page "/PlaylistCreation"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager


<div class="container">
    <!-- Header -->
    <header>
        <h1>Create a New Playlist</h1>
        <button class="btn back-btn" onclick="window.history.back();">Back to Dashboard</button>
    </header>

    <!-- Playlist Details Section -->
    <section class="playlist-details">
        <h2>Playlist Details</h2>
        <form id="playlistForm">
            <div class="form-group">
                <label for="playlistName">Playlist Name:</label>
                <input type="text" id="playlistName" placeholder="Enter playlist name" required @bind="PlaylistName">
            </div>
            <div class="form-group">
                <label for="coverImage">Cover Image:</label>
                @* <input type="file" id="coverImage" accept="image/*" @onchange="HandleCoverImageUpload"> *@
                <InputFile OnChange="HandleCoverImageUpload" />
            </div>
        </form>
    </section>  

    <!-- Song Selection Section -->
    <section class="song-selection">
        <h2>Search and Select Songs</h2>
        <div class="form-group">
            <input type="text" id="searchBar" placeholder="Search songs by title, artist, or album" @oninput="FilterSongs">
        </div>
        <div class="song-list">
            <h3>Available Songs</h3>
            <ul id="availableSongs">
                @if (filteredSongs == null || !filteredSongs.Any())
                {
                    <li>No songs available</li>
                }
                else
                {
                    @for (int i = (currentPage - 1) * pageSize; i < Math.Min(currentPage * pageSize, filteredSongs.Count); ++i)
                    {
                        <li>
                             <strong>@filteredSongs[i].Name</strong> @*(ID: @filteredSongs[i].Id) *@
                            <br />
                            <AddButtonWithId id=i CallMethod="AddSong"></AddButtonWithId>
                        </li>
                    }
                }
            </ul>

            <!-- Pagination Controls -->
            <div class="PaginationControls">
                <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@IsFirstPage">Previous</button>
                <span>Page @CurrentPage of @TotalPages</span>
                <button @onclick="NextPage" class="btn btn-secondary" disabled="@IsLastPage">Next</button>
            </div>
        </div>

        <div class="selected-songs">
            <h3>Selected Songs</h3>
            <ul id="selectedSongs">
                @if (SelectedSongs == null || !SelectedSongs.Any())
                {
                    <li>No songs available</li>
                }
                else
                {
                    @for (int i = 0; i < SelectedSongs.Count; ++i)
                    {
                        <li>
                             <strong>@SelectedSongs[i].Name</strong> @*(ID: @SelectedSongs[i].Id) *@
                            <br />
                            <RemoveButtonWithId id=i CallMethod="RemoveSong"></RemoveButtonWithId>
                        </li>
                    }
                }
            </ul>
        </div>
    </section>

    <!-- Actions Section -->
    <button class="btn save-btn" @onclick="SavePlaylist">Save Playlist</button>
    <button class="btn clear-btn" @onclick="ClearForm">Clear Form</button>
    <button class="btn cancel-btn">Cancel</button>
</div>

@code {
    private string PlaylistName = string.Empty;
    private string? CoverImagePath;
    private List<Song> Songs = new();
    private List<Song> addedSongs = new();
    private List<Song> filteredSongs = new();
    private List<Song> SelectedSongs = new();
    private List<Playlist> playlists = new();
    private int currentPage = 1;
    private const int pageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)filteredSongs.Count / pageSize);

    // Methods to handle pagination logic
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;
    private bool CanGoNext => currentPage * pageSize < filteredSongs.Count;
    private bool CanGoPrevious => currentPage > 1;
    private int CurrentPage => currentPage;
    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdatePagination();
            StateHasChanged();
        }
    }
    
    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdatePagination();
            StateHasChanged();
        }
    }

    // Method to update the pagination data
    private void UpdatePagination()
    {
        // Ensure that the filteredSongs list is updated when switching pages
        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = Math.Min(currentPage * pageSize, filteredSongs.Count);
        var paginatedSongs = filteredSongs.Skip(startIndex).Take(endIndex - startIndex).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSongsAsync();
        SelectedSongs = new List<Song>(); // Ensure SelectedSongs is initialized
        filteredSongs = new List<Song>(Songs); // Initialize filteredSongs from Songs
    }

    private async Task LoadSongsAsync()
    {
        using var localContext = await DbFactory.CreateDbContextAsync();
        Songs = await localContext.Song.ToListAsync();
        filteredSongs = new List<Song>(Songs);
        UpdatePagination(); // Initialize pagination state after loading songs
    }

    private void FilterSongs(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString()?.ToLower();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSongs = new List<Song>(Songs);
        }
        else
        {
            filteredSongs = Songs
                .Where(song => song.Name.ToLower().Contains(searchTerm))
                .ToList();
        }

        // Reset to the first page after applying filter
        currentPage = 1;
        UpdatePagination();
    }

    private void AddSong(int songId)
    {
        if (SelectedSongs.Any(s => s.SongId == filteredSongs[songId].SongId))
        {
            Console.WriteLine("Song is already in the selected list.");
            return;
        }
        // Add to SelectedSongs
        SelectedSongs.Add(filteredSongs[songId]);
        
        // Remove from filteredSongs
        filteredSongs.Remove(filteredSongs[songId]);
        
        // Debugging Methods for Songs
        Console.WriteLine($"Added song: {filteredSongs[songId].Name}");
        Console.WriteLine($"Filtered Songs Count:   {filteredSongs.Count}");
        UpdatePagination(); // Recalculate pagination state
    }

    private void RemoveSong(int songId)
    {
        if (SelectedSongs.Any(s => s.SongId == filteredSongs[songId].SongId))
        {
            Console.WriteLine("Song is already in the filtered list.");
            return;
        }

        // Add Song to filteredSongs
        filteredSongs.Add(SelectedSongs[songId]);

        // Remove Song from selectedSongs
        SelectedSongs.Remove(SelectedSongs[songId]);

        // Debugging Methods for Songs
        UpdatePagination(); // Recalculate pagination state
    }


    private async Task SavePlaylist()
    {
        //   Get the authentication state 
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync(); 
        var user = authState.User; 
 
        // Check if the user is authenticated 
        if (!user.Identity.IsAuthenticated) 
        { 
            Console.WriteLine("User is not authenticated. Cannot save playlist."); 
            return; 
        } 
 
        // Retrieve the User ID from claims 
        var UserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value; 
 
        if (string.IsNullOrEmpty(UserId)) 
        { 
            Console.WriteLine("User ID not found in claims."); 
            return; 
        } 
        
        using var localContext = await DbFactory.CreateDbContextAsync(); 
        User gorilla = await localContext.User.FirstOrDefaultAsync((m => m.ASPNetUserID == UserId)); 
        
        
        var playlist = new Domain.Playlist(); 
 
        //BaseDomainModel Methods 
         
        playlist.DateUpdated = DateTime.Now; 
        playlist.DateCreated = DateTime.Now; 
        playlist.CreatedBy = UserId; 
        playlist.UpdateBy = UserId; 
         
        //playlist Methods 
         
        playlist.PlaylistName = PlaylistName;
        playlist.CoverImagePath = CoverImagePath;
        playlist.Songs = new List<Domain.Song>(); // Initialize the Songs collection if not done already. 
 
        // Assuming SelectedSongs is a list of Song objects that already exist in your localContext or are newly created 
        foreach (var song in SelectedSongs) 
        { 
            // Make sure each song is either added to the context or attached 
            if (localContext.Entry(song).State == EntityState.Detached) 
            { 
                // If the song is not tracked, add it to the context 
                localContext.Song.Attach(song); 
                
                playlist.Songs.Add(song); 
            } 
            
            playlist.Songs.Add(song); 
            Console.WriteLine($"Number of Songs saved into playlist: {Songs.Count}");

            navigationManager.NavigateTo("/Playlist");
        } 
         
        playlists = await localContext.Playlist.ToListAsync();
        Console.WriteLine($"Number of playlists before: {playlists?.Count}");
        localContext.Playlist.Add(playlist); 
        
        await localContext.SaveChangesAsync(); 
        
        playlists = await localContext.Playlist.ToListAsync();
        Console.WriteLine($"Number of playlists after: {playlists?.Count}");

    }

    private void ClearForm()
    {
        PlaylistName = string.Empty;
        CoverImagePath = null;
        SelectedSongs.Clear();
        filteredSongs = new List<Song>(Songs);
        currentPage = 1; // Reset to first page after clearing form
    }

    //Method to handle cover image uploading
    
     private async Task HandleCoverImageUpload(InputFileChangeEventArgs e)
     {
         var file = e.File;
         // Ensure that a file is selected
         if (file == null)
         {
             return;
         }
    
         // Generate the upload path
         var uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", file.Name);
         
         // Save the file to the server
         using (var stream = new FileStream(uploadPath, FileMode.Create))
         {
             await file.OpenReadStream().CopyToAsync(stream);
         }
    
         // Store the relative path for the image
         CoverImagePath = "/images/" + file.Name;
     }

    public async ValueTask DisposeAsync()
    {
        // Dispose of any resources if necessary
    }
}