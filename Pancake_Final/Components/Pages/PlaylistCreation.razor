@page "/PlaylistCreation"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject NavigationManager NavigationManager


<div class="container">
    <!-- Header -->
    <header>
        <h1>Create a New Playlist</h1>
        <button class="btn back-btn" onclick="window.history.back();">Back to Dashboard</button>
    </header>

    <!-- Playlist Details Section -->
    <section class="playlist-details">
        <h2>Playlist Details</h2>
        <form id="playlistForm">
            <div class="form-group">
                <label for="playlistName">Playlist Name:</label>
                <input type="text" id="playlistName" placeholder="Enter playlist name" required @bind="PlaylistName">
            </div>
            <div class="form-group">
                <label for="coverImage">Cover Image:</label>
                @* <input type="file" id="coverImage" accept="image/*" @onchange="HandleCoverImageUpload"> *@
                <InputFile OnChange="HandleCoverImageUpload" />
            </div>
            <div class="form-group">
                <label for="genreSelect">Select a Genre:</label>
                <select id="genreSelect" @onchange="HandleGenreSelection" disabled="@(!string.IsNullOrWhiteSpace(NewGenreName))">
                    <option value="">-- Select Genre --</option>
                    @foreach (var genre in Genres)
                    {
                        <option value="@genre.GenreID" selected="@(genre.GenreID.ToString() == SelectedGenreId)">@genre.GenreName</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="newGenre">Or Enter a New Genre:</label>
                <input type="text" id="newGenre" @oninput="HandleGenreInput" disabled="@(!string.IsNullOrWhiteSpace(SelectedGenreId))" />
            </div>
        </form>
    </section>  

    <!-- Song Selection Section -->
    <section class="song-selection">
        <h2>Search and Select Songs</h2>
        <div class="form-group">
            <input type="text" id="searchBar" placeholder="Search songs by title, artist, or album" @oninput="FilterSongs">
        </div>
        <div class="song-list">
            <h3>Available Songs</h3>
            <ul id="availableSongs">
                @if (filteredSongs == null || !filteredSongs.Any())
                {
                    <li>No songs available</li>
                }
                else
                {
                    @for (int i = (currentPage - 1) * pageSize; i < Math.Min(currentPage * pageSize, filteredSongs.Count); ++i)
                    {
                        <li>
                             <strong>@filteredSongs[i].Name</strong> @*(ID: @filteredSongs[i].Id) *@
                            <br />
                            <AddButtonWithId id=i CallMethod="AddSong"></AddButtonWithId>
                        </li>
                    }
                }
            </ul>

            <!-- Pagination Controls -->
            <div class="PaginationControls">
                <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@IsFirstPage">Previous</button>
                <span>Page @CurrentPage of @TotalPages</span>
                <button @onclick="NextPage" class="btn btn-secondary" disabled="@IsLastPage">Next</button>
            </div>
        </div>

        <div class="selected-songs">
            <h3>Selected Songs</h3>
            <ul id="selectedSongs">
                @if (SelectedSongs == null || !SelectedSongs.Any())
                {
                    <li>No songs available</li>
                }
                else
                {
                    @for (int i = 0; i < SelectedSongs.Count; ++i)
                    {
                        <li>
                             <strong>@SelectedSongs[i].Name</strong> @*(ID: @SelectedSongs[i].Id) *@
                            <br />
                            <RemoveButtonWithId id=i CallMethod="RemoveSong"></RemoveButtonWithId>
                        </li>
                    }
                }
            </ul>
        </div>
    </section>

    <!-- Actions Section -->
    <button class="btn save-btn" @onclick="SavePlaylist">Save Playlist</button>
    <button class="btn clear-btn" @onclick="ClearForm">Clear Form</button>
    <button class="btn cancel-btn">Cancel</button>
</div>

@code {
    private string PlaylistName = string.Empty;
    private string? CoverImagePath;
    private List<Song> Songs = new();
    private List<Song> addedSongs = new();
    private List<Genre> Genres = new();
    private string? SelectedGenreId;
    private string? NewGenreName;
    private List<Song> filteredSongs = new();
    private List<Song> SelectedSongs = new();
    private List<Playlist> playlists = new();
    private int currentPage = 1;
    private const int pageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)filteredSongs.Count / pageSize);
    
    //Genre logic
    private bool IsGenreDropdownActive = true;
    private bool IsNewGenreInputActive = false;

    // Methods to handle pagination logic
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;
    private bool CanGoNext => currentPage * pageSize < filteredSongs.Count;
    private bool CanGoPrevious => currentPage > 1;
    private int CurrentPage => currentPage;
    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdatePagination();
            StateHasChanged();
        }
    }
    
    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdatePagination();
            StateHasChanged();
        }
    }

    // Method to update the pagination data
    private void UpdatePagination()
    {
        // Ensure that the filteredSongs list is updated when switching pages
        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = Math.Min(currentPage * pageSize, filteredSongs.Count);
        var paginatedSongs = filteredSongs.Skip(startIndex).Take(endIndex - startIndex).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSongsAsync();
        await LoadGenresAsync();
        SelectedSongs = new List<Song>(); // Ensure SelectedSongs is initialized
        filteredSongs = new List<Song>(Songs); // Initialize filteredSongs from Songs
    }
    private async Task LoadGenresAsync()
    {
        using var localContext = await DbFactory.CreateDbContextAsync();
        Genres = await localContext.Genre.ToListAsync();
    }

    private async Task LoadSongsAsync()
    {
        using var localContext = await DbFactory.CreateDbContextAsync();
        Songs = await localContext.Song.ToListAsync();
        filteredSongs = new List<Song>(Songs);
        UpdatePagination(); // Initialize pagination state after loading songs
    }
    
    private void HandleGenreSelection(ChangeEventArgs e)
    {
        SelectedGenreId = e.Value?.ToString(); // Update the selected genre

        if (!string.IsNullOrWhiteSpace(SelectedGenreId))
        {
            NewGenreName = null; // Clear the input field if a genre is selected
        }
    }


    private void HandleGenreInput(ChangeEventArgs e)
    {
        NewGenreName = e.Value?.ToString(); // Update the new genre input

        if (!string.IsNullOrWhiteSpace(NewGenreName))
        {
            SelectedGenreId = null; // Clear the dropdown if text is being entered
        }
    }

    private void FilterSongs(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString()?.ToLower();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSongs = new List<Song>(Songs);
        }
        else
        {
            filteredSongs = Songs
                .Where(song => song.Name.ToLower().Contains(searchTerm))
                .ToList();
        }

        // Reset to the first page after applying filter
        currentPage = 1;
        UpdatePagination();
    }

    private void AddSong(int songIndex)
    {
        var selectedSong = filteredSongs[songIndex];

        // Prevent duplicates
        if (SelectedSongs.Any(s => s.SongId == selectedSong.SongId))
        {
            Console.WriteLine($"⚠️ Song '{selectedSong.Name}' is already in the selected list.");
            return;
        }

        // Add to selected songs
        SelectedSongs.Add(selectedSong);

        // Remove from filtered songs
        filteredSongs.RemoveAt(songIndex);

        Console.WriteLine($"✅ Added song: {selectedSong.Name}");
        UpdatePagination();
    }


    private void RemoveSong(int songIndex)
    {
        var removedSong = SelectedSongs[songIndex];

        // Prevent duplicates in filtered songs
        if (filteredSongs.Any(s => s.SongId == removedSong.SongId))
        {
            Console.WriteLine($"⚠️ Song '{removedSong.Name}' is already in the filtered list.");
            return;
        }

        // Add back to filtered songs
        filteredSongs.Add(removedSong);

        // Remove from selected songs
        SelectedSongs.RemoveAt(songIndex);

        Console.WriteLine($"✅ Removed song: {removedSong.Name}");
        UpdatePagination();
    }



    private async Task SavePlaylist()
    {
        using var localContext = await DbFactory.CreateDbContextAsync();
        
        Genre? selectedGenre = null;

        // If user selected an existing genre, find it in DB
        if (!string.IsNullOrWhiteSpace(SelectedGenreId))
        {
            selectedGenre = await localContext.Genre.FindAsync(int.Parse(SelectedGenreId));
        }
        // If user entered a new genre, save it
        else if (!string.IsNullOrWhiteSpace(NewGenreName))
        {
            selectedGenre = new Genre
            {
                GenreName = NewGenreName,
                DateCreated = DateTime.Now,
                DateUpdated = DateTime.Now,
                CreatedBy = "SomeUser",
                UpdateBy = "SomeUser"
            };

            localContext.Genre.Add(selectedGenre);
            await localContext.SaveChangesAsync();
        }

        if (selectedGenre == null)
        {
            Console.WriteLine("⚠️ No genre selected. Playlist not saved.");
            return;
        }

        var playlist = new Playlist
        {
            PlaylistName = PlaylistName,
            CoverImagePath = CoverImagePath,
            DateCreated = DateTime.Now,
            DateUpdated = DateTime.Now,
            CreatedBy = "SomeUser", // Replace with actual user
            UpdateBy = "SomeUser",
            GenreID = selectedGenre.GenreID,
            NewGenreName = selectedGenre.GenreName,
            Songs = new List<Song>() // Initialize the Songs collection
        };

        foreach (var song in SelectedSongs)
        {
            // Ensure the song is tracked or attach it
            if (localContext.Entry(song).State == EntityState.Detached)
            {
                localContext.Song.Attach(song);
            }

            playlist.Songs.Add(song);
        }

        // Save playlist and associated songs
        localContext.Playlist.Add(playlist);
        await localContext.SaveChangesAsync();

        Console.WriteLine($"✅ Playlist '{playlist.PlaylistName}' created with {playlist.Songs.Count} songs.");
        NavigationManager.NavigateTo("/Playlist");
    }

    private void ClearForm()
    {
        PlaylistName = string.Empty;
        CoverImagePath = null;
        SelectedSongs.Clear();
        filteredSongs = new List<Song>(Songs);
        currentPage = 1; // Reset to first page after clearing form
    }

    //Method to handle cover image uploading
    
    private async Task HandleCoverImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
        {
            Console.WriteLine("⚠️ No file selected for upload.");
            return;
        }

        // Generate the upload path
        var uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", file.Name);

        try
        {
            // Save the file to the server
            using var stream = new FileStream(uploadPath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            // Store the relative path for the image
            CoverImagePath = "/images/" + file.Name;

            Console.WriteLine($"✅ Cover image uploaded successfully: {CoverImagePath}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error uploading cover image: {ex.Message}");
        }
    }


    public async ValueTask DisposeAsync()
    {
        // Dispose of any resources if necessary
    }
}