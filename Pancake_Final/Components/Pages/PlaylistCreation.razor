@page "/PlaylistCreation"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create a Playlist</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header>
            <h1>Create a New Playlist</h1>
            <button class="btn back-btn" onclick="window.history.back();">Back to Dashboard</button>
        </header>

        <!-- Playlist Details Section -->
        <section class="playlist-details">
            <h2>Playlist Details</h2>
            <form id="playlistForm">
                <div class="form-group">
                    <label for="playlistName">Playlist Name:</label>
                    <input type="text" id="playlistName" placeholder="Enter playlist name" required>
                </div>
                <div class="form-group">
                    <label for="coverImage">Cover Image:</label>
                    <input type="file" id="coverImage" accept="image/*">
                </div>
            </form>
        </section>

        <!-- Song Selection Section -->
        <section class="song-selection">
            <h2>Search and Select Songs</h2>
            <div class="form-group">
                <input type="text" id="searchBar" placeholder="Search songs by title, artist, or album">
            </div>
            <div class="song-list">
                <h3>Available Songs</h3>
                <ul id="availableSongs">
                    @if (filteredSongs == null || !filteredSongs.Any())
                    {
                        <li>No songs available</li>
                    }
                    else
                    {
                        @foreach (var song in filteredSongs)
                        {
                            <li>
                                <strong>@song.Name</strong> - @song.Duration
                                <br />
                                <small>@song.FilePath</small>
                            </li>
                        }
                    }
                </ul>
            </div>
            <div class="selected-songs">
                <h3>Selected Songs</h3>
                <ul id="selectedSongs">
                    <!-- Selected songs will be shown here -->
                </ul>
            </div>
        </section>

        <!-- Actions Section -->
        <section class="actions">
            <button class="btn save-btn" onclick="savePlaylist()">Save Playlist</button>
            <button class="btn clear-btn" onclick="clearForm()">Clear Form</button>
            <button class="btn cancel-btn">Cancel</button>
        </section>
    </div>
    <script src="script.js"></script>
</body>
</html>

<QuickGrid Class="table" Items="context.Playlist">
    <PropertyColumn Property="playlist => playlist.PlaylistID" />
    <PropertyColumn Property="playlist => playlist.UserId" />
    <PropertyColumn Property="playlist => playlist.PlaylistName" />
    <PropertyColumn Property="playlist => playlist.DateCreated" />
    <PropertyColumn Property="playlist => playlist.DateUpdated" />
    <PropertyColumn Property="playlist => playlist.CreatedBy" />
    <PropertyColumn Property="playlist => playlist.UpdateBy" />
    <TemplateColumn Context="playlist">
        <a href="@($"playlists/edit?id={playlist.Id}")">Edit</a> |
        <a href="@($"playlists/details?id={playlist.Id}")">Details</a> |
        <a href="@($"playlists/delete?id={playlist.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {


    private Pancake_FinalContext context = default!;
    private string PlaylistName = string.Empty;
    private string? CoverImagePath;
    private List<Song> Songs = new();
    private List<Song> filteredSongs = new();
    private List<Song> SelectedSongs = new();

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync(); // Initialize context
        filteredSongs = await context.Song.ToListAsync(); // Fetch songs
        Songs = new List<Song>(filteredSongs); // Backup the full list for filtering
    }

    private void FilterSongs(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString()?.ToLower();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSongs = new List<Song>(Songs);
        }
        else
        {
            filteredSongs = Songs
                .Where(song => song.Name.ToLower().Contains(searchTerm))
                .ToList();
        }
    }

    private void AddSong(Song song)
    {
        if (!SelectedSongs.Contains(song))
        {
            SelectedSongs.Add(song);
            filteredSongs.Remove(song);
        }
    }

    private void RemoveSong(Song song)
    {
        if (SelectedSongs.Contains(song))
        {
            SelectedSongs.Remove(song);
            filteredSongs.Add(song);
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}