@page "/listeninghistories/edit"
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>ListeningHistory</h2>
<hr />
@if (ListeningHistory is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ListeningHistory" OnValidSubmit="UpdateListeningHistory" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ListeningHistory.HistoryId" value="@ListeningHistory.HistoryId" />
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputNumber id="userid" @bind-Value="ListeningHistory.UserId" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="songid" class="form-label">SongId:</label>
                    <InputNumber id="songid" @bind-Value="ListeningHistory.SongId" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.SongId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="ListeningHistory.Name" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="id" class="form-label">Id:</label>
                    <InputNumber id="id" @bind-Value="ListeningHistory.Id" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.Id" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="ListeningHistory.DateCreated" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="ListeningHistory.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="ListeningHistory.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updateby" class="form-label">UpdateBy:</label>
                    <InputText id="updateby" @bind-Value="ListeningHistory.UpdateBy" class="form-control" />
                    <ValidationMessage For="() => ListeningHistory.UpdateBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/listeninghistories">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int HistoryId { get; set; }

    [SupplyParameterFromForm]
    private ListeningHistory? ListeningHistory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ListeningHistory ??= await context.ListeningHistory.FirstOrDefaultAsync(m => m.HistoryId == HistoryId);

        if (ListeningHistory is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateListeningHistory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ListeningHistory!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ListeningHistoryExists(ListeningHistory!.HistoryId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/listeninghistories");
    }

    private bool ListeningHistoryExists(int historyid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ListeningHistory.Any(e => e.HistoryId == historyid);
    }
}
