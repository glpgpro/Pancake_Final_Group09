@page "/listeninghistories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_FinalContext> DbFactory

<PageTitle>Listening History</PageTitle>

<h1>Listening History</h1>

<QuickGrid Class="table" Items="listeningHistoryList">
    <PropertyColumn Property="history => history.HistoryId" Title="ID" />
    <PropertyColumn Property="history => history.UserId" Title="User ID" />
    <PropertyColumn Property="history => history.SongId" Title="Song ID" />
    <PropertyColumn Property="history => history.Name" Title="Song Name" />
    <PropertyColumn Property="history => history.DatePlayed" Title="Date Played" />

    <TemplateColumn Context="history">
        <a href="@($"listeninghistories/details?historyid={history.HistoryId}")">Details</a> |
        <a href="@($"listeninghistories/delete?historyid={history.HistoryId}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private Pancake_FinalContext context = default!;
    private IQueryable<ListeningHistory> listeningHistoryList = default!;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync(); // Assign the class-level variable

        // Fetch the listening history as IQueryable
        listeningHistoryList = context.ListeningHistory.OrderByDescending(h => h.DatePlayed);
    }

    public async ValueTask DisposeAsync()
    {
        // Dispose the context when the component is destroyed
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}