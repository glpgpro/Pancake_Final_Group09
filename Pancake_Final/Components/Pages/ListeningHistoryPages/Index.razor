@page "/listeninghistories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory

<PageTitle>Listening History</PageTitle>

<h1>Listening History</h1>

<p>
    <a href="/listeninghistories/create" class="btn btn-primary">Create New</a>
</p>

<QuickGrid Class="table table-striped" Items="ListeningHistories" RowClass="row-class">
    <PropertyColumn Title="User ID" Property="listeninghistory => listeninghistory.UserId" />
    <PropertyColumn Title="Song Name" Property="listeninghistory => listeninghistory.Name" />
    <PropertyColumn Title="Date Played" Property="listeninghistory => listeninghistory.DateCreated" />
    <PropertyColumn Title="Played By" Property="listeninghistory => listeninghistory.CreatedBy" />
    <TemplateColumn Context="listeninghistory">
        <a href="@($"listeninghistories/edit?historyid={listeninghistory.Id}")">Edit</a> |
        <a href="@($"listeninghistories/details?historyid={listeninghistory.Id}")">Details</a> |
        <a href="@($"listeninghistories/delete?historyid={listeninghistory.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private Pancake_FinalContext context = default!;
    private List<ListeningHistory> ListeningHistories = new();

    // Fetch listening history data
    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        // Fetch all listening history records, including song details
        ListeningHistories = await context.ListeningHistory
            .Include(lh => lh.Song) // Include related song information
            .ToListAsync();
    }

    // Clean up database context when the component is disposed
    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // Optional: Apply row styles dynamically
    private string row-class(ListeningHistory history)
    {
        return history.DateCreated.Date == DateTime.UtcNow.Date ? "table-success" : "";
    }
}

