@page "/SubscriptionPage"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Pancake_Final.Domain
@using Pancake_Final.Data
@using Microsoft.AspNetCore.Components.Authorization
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Subscription</PageTitle>
<!DOCTYPE html>

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Subscription</title>
<link rel="stylesheet" href="Subscription.razor.css">

<header class="page-header">
    <img class="logo" src="/images/pancakeLogo.png" /> Subscription Options
</header>

<main>
    <div class="subscription-container">
        <div class="subscription-card">
            <h3 class="plan-title">Free</h3>
            <p class="plan-price">0 SGD</p>
            <p class="plan-details">SGD 0 for however long you want</p>
            <ul class="plan-features">
                <li>No Premium usage</li>
                <li>No Playlists</li>
                <li>Listen to your favourite songs</li>
                <li>No Payment required</li>
            </ul>
            <div class="button-container">
                <button class="btn-primary" @onclick="() => FreeSubscription()">Continue as Free User</button>
            </div>
        </div>

        <div class="subscription-card">
            <h3 class="plan-title">Premium</h3>
            <p class="plan-price">SGD 0 for 1 month</p>
            <p class="plan-details">SGD 5.98/month after</p>
            <ul class="plan-features">
                <li>1 verified Premium account</li>
                <li>Unlimited Features</li>
                <li>No refund</li>
                <li>Subscribe or one-time payment</li>
            </ul>
            <div class="button-container">
                <button class="btn-primary" @onclick="() => PremiumSubscription(1)">Try 1 month for SGD 0</button>
            </div>
        </div>
    </div>

    @if (isUpdating)
    {
        <p>Updating your subscription...</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error">@errorMessage</p>
    }
</main>

@code {
    private Pancake_FinalContext context = default!;
    private bool isUpdating = false;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private async Task FreeSubscription()
    {
        NavigationManager.NavigateTo("/Home");
    }

    private async Task PremiumSubscription(int subscriptionId)
    {
        isUpdating = true;
        errorMessage = null;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userEmail = user.Identity?.Name; // Assumes authentication is based on email

            if (string.IsNullOrEmpty(userEmail))
            {
                errorMessage = "⚠️ User is not authenticated!";
                isUpdating = false;
                return;
            }

            using var dbContext = await DbFactory.CreateDbContextAsync();

            // Fetch the user from the database
            var dbUser = await dbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            if (dbUser == null)
            {
                errorMessage = "⚠️ User not found in the database.";
                isUpdating = false;
                return;
            }

            // Set GenreStatus based on subscriptionId
            // User.SubStatus = subscriptionId == 1 ? "free" : "premium";

            await dbContext.SaveChangesAsync();

            // Console.WriteLine($"✅ Subscription updated to {dbUser.GenreStatus} for user {userEmail}");

            // Redirect after selection
            NavigationManager.NavigateTo("/purchaseSubscription");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error updating subscription: " + ex.Message);
            errorMessage = "❌ An error occurred while updating your subscription.";
        }
        finally
        {
            isUpdating = false;
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

}