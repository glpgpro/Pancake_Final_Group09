@page "/subscriptions/delete"
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Subscription</h2>
    <hr />
    @if (subscription is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">SubId</dt>
            <dd class="col-sm-10">@subscription.SubId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@subscription.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@subscription.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SubStatus</dt>
            <dd class="col-sm-10">@subscription.SubStatus</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SubPlans</dt>
            <dd class="col-sm-10">@subscription.SubPlans</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@subscription.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@subscription.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@subscription.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdateBy</dt>
            <dd class="col-sm-10">@subscription.UpdateBy</dd>
        </dl>
        <EditForm method="post" Model="subscription" OnValidSubmit="DeleteSubscription" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(subscription is null)">Delete</button> |
            <a href="/subscriptions">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Subscription? subscription;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subscription = await context.Subscription.FirstOrDefaultAsync(m => m.Id == Id);

        if (subscription is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSubscription()
    {
        using var context = DbFactory.CreateDbContext();
        context.Subscription.Remove(subscription!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/subscriptions");
    }
}
