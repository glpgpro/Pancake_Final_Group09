@page "/albums/edit"
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Album</h2>
<hr />
@if (Album is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Album" OnValidSubmit="UpdateAlbum" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Album.AlbumID" value="@Album.AlbumID" />
                <div class="mb-3">
                    <label for="artistid" class="form-label">ArtistID:</label>
                    <InputNumber id="artistid" @bind-Value="Album.ArtistID" class="form-control" />
                    <ValidationMessage For="() => Album.ArtistID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genid" class="form-label">GenID:</label>
                    <InputNumber id="genid" @bind-Value="Album.GenID" class="form-control" />
                    <ValidationMessage For="() => Album.GenID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Album.Name" class="form-control" />
                    <ValidationMessage For="() => Album.Name" class="text-danger" />
                </div>
                @* <div class="mb-3">
                    <label for="albumimage" class="form-label">AlbumImage:</label>
                    <InputText id="albumimage" @bind-Value="Album.AlbumImage" class="form-control" />
                    <ValidationMessage For="() => Album.AlbumImage" class="text-danger" />
                </div> *@
                <div class="mb-3">
                    <label for="id" class="form-label">Id:</label>
                    <InputNumber id="id" @bind-Value="Album.Id" class="form-control" />
                    <ValidationMessage For="() => Album.Id" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Album.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Album.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Album.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Album.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Album.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Album.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updateby" class="form-label">UpdateBy:</label>
                    <InputText id="updateby" @bind-Value="Album.UpdateBy" class="form-control" />
                    <ValidationMessage For="() => Album.UpdateBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/albums">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AlbumID { get; set; }

    [SupplyParameterFromForm]
    private Album? Album { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Album ??= await context.Album.FirstOrDefaultAsync(m => m.AlbumID == AlbumID);

        if (Album is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAlbum()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Album!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AlbumExists(Album!.AlbumID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/albums");
    }

    private bool AlbumExists(int albumid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Album.Any(e => e.AlbumID == albumid);
    }
}
