    @page "/Playlist"
    @* @rendermode InteractiveServer *@
    @using Microsoft.EntityFrameworkCore
    @using Microsoft.AspNetCore.Components.QuickGrid
    @using Pancake_Final.Domain
    @using Pancake_Final.Data
    @implements IAsyncDisposable
    @inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
    @inject NavigationManager NavigationManager


    <PageTitle>Index</PageTitle>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Playlist</title>
        <link rel="stylesheet" href="Playlist.razor.css">
    </head>
    <body>
        <main>
            <h1>
                <img class="logo" src="/images/pancakeLogo.png" alt="Logo">Your Playlist
            </h1>
            <div class="PlaylistSearchbar">
                <input placeholder="Enter playlist name" />
                <button class="SearchPlaylistButton">Search</button>
                <button class="AddPlaylistButton" >
                    <a class="btn btn-primary" href="/PlaylistCreation">Create Playlist</a>
                </button>
                <button class="DeletePlaylistButton">Delete Playlist
                </button>
            </div>
            <div class="playlistcards_container">
                @if (playlists != null && playlists.Any())
                {
                    @foreach (var playlist in playlists)
                    {
                        <div class="Playlist_card" key="@playlist.PlaylistId">
                            <div class="card-body">
                                <h5 class="card-title">@playlist.PlaylistName</h5>
                                <img src="@playlist.CoverImagePath" alt="@playlist.PlaylistName" class="R1image">
                                <button class="btn btn-danger" @onclick="() => PlayPlaylist(playlist)">Play</button>
                                <div class="AudioPlayback">
                                    <audio id="audioPlayer" controls style="width: 100%;"></audio>
                                </div>
                                <!-- Link for JavaScript file -->
                                <script src="/Js/AudioPlayer.js"></script>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No playlists found.</p>
                }
            </div>
        </main>
    </body>
    </html>
    <QuickGrid Class="table" Items="context.Playlist">
        <PropertyColumn Property="playlist => playlist.PlaylistId"/>
        <PropertyColumn Property="playlist => playlist.UserId" />
        <PropertyColumn Property="playlist => playlist.PlaylistName" />
        <PropertyColumn Property="playlist => playlist.DateCreated" />
        <PropertyColumn Property="playlist => playlist.DateUpdated" />
        <PropertyColumn Property="playlist => playlist.CreatedBy" />
        <PropertyColumn Property="playlist => playlist.UpdateBy" />
        <TemplateColumn Context="playlist">
        <a href="@($"playlists/edit?id={playlist.Id}")">Edit</a> |
        <a href="@($"playlists/details?id={playlist.Id}")">Details</a> |
        <a href="@($"playlists/delete?id={playlist.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>

    @code {
        private string searchQuery = string.Empty;
        private List<Playlist> playlists = new();
        
        private async Task LoadPlaylistsAsync()
        {
            using var localContext = await DbFactory.CreateDbContextAsync();
            playlists = await localContext.Playlist
                .Where(p => string.IsNullOrEmpty(searchQuery) || p.PlaylistName.Contains(searchQuery))
                .ToListAsync();
        }

        private void SearchPlaylists()
        {   
            LoadPlaylistsAsync().Wait(); // Re-fetch playlists based on the search query
        }
        

        private void PlayPlaylist(Playlist playlist)
        {
            Console.WriteLine($"Playing playlist: {playlist.PlaylistName}");
            // Implement song playback logic here, e.g., navigate to a playlist detail page or trigger audio playback
        }
        
        
        private void NavigateToCreatePlaylist()
        {
            NavigationManager.NavigateTo("/PlaylistCreation");
        }

        private Pancake_FinalContext context = default!;

        protected override void OnInitialized()
        {
            context = DbFactory.CreateDbContext();
        }

        public async ValueTask DisposeAsync() => await context.DisposeAsync();
    }
