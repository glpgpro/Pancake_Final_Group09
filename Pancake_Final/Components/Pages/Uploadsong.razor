@page "/UploadSong"


@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Upload Song</PageTitle>
<h3>Recently Uploaded Songs</h3>
<div class="outer-container">
    <div class="container">
        <div class="main-container">
            <h1>Upload a New Song</h1>

            @if (isUploading)
            {
                <p>Uploading, please wait...</p>
            }
            else
            {
                <EditForm Model="newSong" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div>
                        <label for="name">Song Name:</label>
                        <InputText id="name" @bind-Value="newSong.Name" class="form-control" />
                    </div>

                    <div>
                        <label for="duration">Song Duration (e.g., 00:03:45):</label>
                        <InputText id="duration" @bind-Value="manualDuration" class="form-control" placeholder="HH:mm:ss" />
                    </div>

                    <div>
                        <label for="file">Upload MP3 File:</label>
                        <InputFile OnChange="HandleFileSelected" accept=".mp3" />
                    </div>

                    @if (!string.IsNullOrEmpty(uploadError))
                    {
                        <p>@uploadError</p>
                    }

                    <button type="submit" class="btn btn-primary" disabled="@isUploading">Upload</button>
                </EditForm>
            }

            <h2>Recently Uploaded Songs</h2>
            @if (recentSongs.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Duration</th>
                            <th>File Path</th>
                        </tr>
                    </thead>

                    @foreach (var song in recentSongs)
                    {
                        <tr>
                            <td>@song.Name</td>
                            <td>@song.Duration</td>
                            <td>@song.FilePath</td>
                        </tr>
                    }

                </table>
            }
            else
            {
                <p>No songs uploaded yet.</p>
            }
        </div>
    </div>
</div>

@code {
    private Song newSong = new(); 
    private IBrowserFile? uploadedFile; 
    private string uploadError = string.Empty; 
    private bool isUploading = false;
    private string manualDuration = ""; // DUration input
    private List<Song> recentSongs = new(); 

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        if (uploadedFile == null || !uploadedFile.ContentType.Equals("audio/mpeg", StringComparison.OrdinalIgnoreCase))
        {
            uploadError = "Please select a valid MP3 file.";
            uploadedFile = null;
        }
        else
        {
            uploadError = string.Empty;
            Console.WriteLine("File selected successfully.");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (uploadedFile == null)
        {
            uploadError = "Please upload an MP3 file.";
            Console.WriteLine("No file was uploaded.");
            return;
        }

        if (!TimeSpan.TryParse(manualDuration, out var parsedDuration))
        {
            uploadError = "Please enter a valid duration (e.g., 00:03:45).";
            Console.WriteLine("Invalid duration entered.");
            return;
        }

        isUploading = true;
        try
        {
            // Save the MP3 file to the web server
            var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
                Console.WriteLine($"Created uploads folder at: {uploadsFolder}");
            }

            var fileName = $"{Guid.NewGuid()}.mp3";
            var filePath = Path.Combine(uploadsFolder, fileName);
            Console.WriteLine($"File will be saved to: {filePath}");

            // Save the file
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fileStream);

            Console.WriteLine("File saved successfully.");

            // Set default values and manually entered duration
            newSong.FilePath = $"/uploads/{fileName}";
            newSong.DateAdded = DateTime.UtcNow;
            newSong.GenID = 1;
            newSong.ArtistId = 1;
            newSong.LikedS = "NotLiked";
            newSong.Duration = parsedDuration;

            Console.WriteLine($"Song details: Name={newSong.Name}, Duration={newSong.Duration}, FilePath={newSong.FilePath}");

            // Save song details to the database
            await using var context = await DbFactory.CreateDbContextAsync();
            await context.Song.AddAsync(newSong);
            await context.SaveChangesAsync();

            // Add the song to the recentSongs list
            recentSongs.Insert(0, newSong); // Add the new song to the beginning of the list

            // Keep only the last 5 songs in the list
            if (recentSongs.Count > 5)
            {
                recentSongs.RemoveAt(recentSongs.Count - 1); // Remove the oldest song
            }

            // Reset form
            newSong = new Song();
            uploadedFile = null;
            manualDuration = string.Empty;
            uploadError = string.Empty;

            Console.WriteLine("Upload successful!");
        }
        catch (Exception ex)
        {
            uploadError = $"An error occurred while uploading the file: {ex.Message}";
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            isUploading = false;
        }
    }

}

