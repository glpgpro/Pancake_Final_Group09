@page "/Home"
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Net.Http.Headers;
@using System.Text.Json;


<PageTitle>Home</PageTitle>

<header>
    <img class="HeaderLogo" src="/images/pancakeLogo.png" alt="Logo"> Pancake
</header>

<div class="SearchBarDiv">
    <input type="text"
           id="SearchBar"
           placeholder="Enter a song"
           @oninput="SearchSongs"></input>
</div>

<div class="SongContainer">
    <table class="song-table">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Artist</th>
                <th>Date Added</th>
                <th>Duration</th>
                <th>Play</th>
            </tr>
        </thead>
        <p>Total Songs: @Songs.Count</p>
        @if (PaginatedSongs != null && PaginatedSongs.Any())
        {
            @foreach (var song in PaginatedSongs)
            {
                <tr>
                    <td>@(FilteredSongs.IndexOf(song) + 1)</td>
                    <td>@song.Name</td>
                    <td>@song.ArtistId</td>
                    <td>@DateTime.Now.ToShortDateString()</td>
                    <td>@FormatDuration(song.Duration)</td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => PlaySong(song.FilePath)">Play</button>
                    </td>
                    <td>
                        <button class="btn btn-sm @(song.LikedS == "Liked" ? "btn-success" : "btn-danger")"
                                 @onclick="() => ToggleLike(song)">
                            @(song.LikedS == "Liked" ? "Unlike" : "Like")
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">No songs found.</td>
            </tr>
        }
    </table>
</div>

<div class="PaginationControls">
    <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@IsFirstPage">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button @onclick="NextPage" class="btn btn-secondary" disabled="@IsLastPage">Next</button>
</div>

<div class="AudioPlayback">
    <audio id="audioPlayer" controls style="width: 100%;"></audio>
</div>
<div class="SongLyrics">
    @if (!string.IsNullOrEmpty(CurrentLyrics))
    {
        <div class="lyrics">@CurrentLyrics</div>
    }
    else
    {
        <p>No lyrics available. Click "Generate Lyrics" to transcribe.</p>
    }
</div>


<!-- Button to generate lyrics for the currently playing song -->
<button class="btn btn-primary" @onclick="GenerateLyricsForCurrentSong" disabled="@string.IsNullOrEmpty(CurrentSongFilePath)">
    Generate Lyrics for Current Song
</button>


<!-- Link for JavaScript file -->
<script src="/Js/AudioPlayer.js"></script>

@code {
    private bool IsFileSelected = false;
    private IBrowserFile? SelectedFile;
    private string CurrentLyrics = ""; // Holds the lyrics of the currently playing song
    private string CurrentSongFilePath = ""; // Holds the file path of the currently playing song
    private Pancake_FinalContext context = default!;
    private List<Song> Songs = new(); // List of all songs
    private List<Song> FilteredSongs = new(); // Filtered songs for search
    private List<Song> PaginatedSongs = new(); // Songs displayed on the current page

    private int CurrentPage = 1; // Current page number
    private int PageSize = 5; // Number of songs per page
    private int TotalPages => (int)Math.Ceiling((double)FilteredSongs.Count / PageSize); // Total pages
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            context = await DbFactory.CreateDbContextAsync();
            Songs = await context.Song.ToListAsync();
            FilteredSongs = Songs;  // Initially no filtering
            UpdatePagination();

            // Validate file paths
            ValidateFilePaths();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private async Task ToggleLike(Song song)
    {
        try
        {
            // Toggle the LikedS value
            song.LikedS = song.LikedS == "Liked" ? "NotLiked" : "Liked";

            // Save the change to the database
            context.Song.Update(song);
            await context.SaveChangesAsync();

            // Optionally refresh UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating song: {ex.Message}");
        }
    }

    private void SearchSongs(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString()?.ToLower();
        
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // If search is cleared, reset the filtered songs to all songs
            FilteredSongs = new List<Song>(Songs);
        }
        else
        {
            // Filter songs based on the search term (case-insensitive search for song name)
            FilteredSongs = Songs
                .Where(song => song.Name.ToLower().Contains(searchTerm))
                .ToList();
        }

        // After filtering, reset to the first page and update pagination
        CurrentPage = 1;
        UpdatePagination();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void UpdatePagination()
    {
        PaginatedSongs = FilteredSongs
            .Skip((CurrentPage - 1) * PageSize) // Skip songs from previous pages
            .Take(PageSize) // Take only the songs for the current page
            .ToList();
    }
    private string FormatDuration(TimeSpan duration)
    {
        int hours = duration.Hours;
        int minutes = duration.Minutes;
        int seconds = duration.Seconds;

        // Format the duration as "HH:mm:ss"
        if (hours > 0)
        {
            return $"{hours:D2}:{minutes:D2}:{seconds:D2}";
        }

        // If the duration has no hours, format it as "mm:ss"
        return $"{minutes:D2}:{seconds:D2}";
    }

    private void ValidateFilePaths()  
    {
        string basePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
        foreach (var song in Songs)
        {
            string fullFilePath = Path.Combine(basePath, song.FilePath);
            if (!File.Exists(fullFilePath))
            {
                Console.WriteLine($"Missing File: {fullFilePath}");
            }
            else
            {
                Console.WriteLine($"Found File: {fullFilePath}");
            }
        }
    }
    //The lyrics function through Flask
    //Updated PlaySong function to get the Lyrics

    private async Task PlaySong(string filePath)
    {
        try
        {
            // Combine base path and relative file path to check if the file exists
            string basePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
            string fullFilePath = Path.Combine(basePath, filePath.TrimStart('/'));

            Console.WriteLine($"Base Path: {basePath}");
            Console.WriteLine($"FilePath from Database: {filePath}");
            Console.WriteLine($"Full File Path Constructed: {fullFilePath}");

            // Check if the file exists
            if (!File.Exists(fullFilePath))
            {
                Console.WriteLine($"Error: File not found at {fullFilePath}");
                return;
            }

            // Save the currently playing song's file path for generating lyrics
            CurrentSongFilePath = fullFilePath;

            // Log the path being passed to JavaScript
            Console.WriteLine($"Attempting to play via JS: {filePath}");
            await JSRuntime.InvokeVoidAsync("playAudio", filePath); // Pass the relative file path directly
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in PlaySong: {ex.Message}");
        }
        var song = await context.Song.FirstOrDefaultAsync(s => s.FilePath == filePath);

        if (song == null)
        {
            Console.WriteLine("Error: Song not found in the database.");
            return;
        }
        var history = new ListeningHistory
        {
            UserId = 1, // Replace with actual logged-in user ID
            // SongId = song.Id, // Use the SongId from the database
            Name = song.Name,
            DatePlayed = DateTime.UtcNow
        };

        await context.ListeningHistory.AddAsync(history);
        await context.SaveChangesAsync();
    }

   private async Task GenerateLyricsForCurrentSong()
{
    if (string.IsNullOrEmpty(CurrentSongFilePath))
    {
        CurrentLyrics = "No song is currently playing.";
        StateHasChanged(); // Notify UI to re-render
        return;
    }

    try
    {
        // Check if the file exists
        if (!File.Exists(CurrentSongFilePath))
        {
            CurrentLyrics = $"Error: File not found at {CurrentSongFilePath}";
            Console.WriteLine(CurrentLyrics);
            StateHasChanged(); // Notify UI to re-render
            return;
        }

        Console.WriteLine($"Sending file to Flask: {CurrentSongFilePath}");

        // Prepare the HTTP client and content
        using var content = new MultipartFormDataContent();
        using var fileStream = new FileStream(CurrentSongFilePath, FileMode.Open, FileAccess.Read);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset the stream position

        var streamContent = new StreamContent(memoryStream);
        streamContent.Headers.ContentType = new MediaTypeHeaderValue("audio/mpeg");
        content.Add(streamContent, "file", Path.GetFileName(CurrentSongFilePath));

        using var client = new HttpClient();
        client.BaseAddress = new Uri("http://172.29.71.221:5000/"); // Flask server address
        var response = await client.PostAsync("transcribe", content); // Send the MP3 file to Flask

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw JSON response: {json}");
            
           // Deserialization process for the raw json
           
try
           {
               JsonDocument doc = JsonDocument.Parse(json); // Parse the raw JSON
               if (doc.RootElement.TryGetProperty("lyrics", out JsonElement lyricsElement))
               {
                   CurrentLyrics = lyricsElement.GetString() ?? "No lyrics found.";
                   Console.WriteLine($"Lyrics extracted: {CurrentLyrics}");
               }
               else
               {
                   Console.WriteLine("Key 'lyrics' not found in JSON.");
                   CurrentLyrics = "Failed to extract lyrics.";
               }
           }
           catch (Exception ex)
           {
               Console.WriteLine($"Error during JSON parsing: {ex.Message}");
               CurrentLyrics = $"Error: {ex.Message}";
           }

        }
        else
        {
            CurrentLyrics = $"Failed to generate lyrics. Flask returned status code: {response.StatusCode}";
            Console.WriteLine(CurrentLyrics);
        }
    }
    catch (Exception ex)
    {
        CurrentLyrics = $"Error: {ex.Message}";
        Console.WriteLine(CurrentLyrics);
    }

    // Notify the UI to re-render
    StateHasChanged();
}




    // Class to deserialize the response
    private class TranscriptionResponse
    {
        public string Lyrics { get; set; }
    }
    
}

