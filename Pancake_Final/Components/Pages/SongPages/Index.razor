@page "/Home"
@using Microsoft.EntityFrameworkCore
@using Pancake_Final.Domain
@using Pancake_Final.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Pancake_Final.Data.Pancake_FinalContext> DbFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<header>
    <img class="HeaderLogo" src="/images/pancakeLogo.png" alt="Logo"> Pancake
</header>

<div class="SearchBarDiv">
    <input class="SearchBar"
           placeholder="Enter a song"
           @bind-value="SearchQuery"
           @bind-value:event="oninput" />
</div>


    <div class="SongContainer">
        <table class="song-table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Title</th>
                    <th>Artist</th>
                    <th>Date Added</th>
                    <th>Duration</th>
                    <th>Play</th>
                </tr>
            </thead>
            <p>Total Songs: @Songs.Count</p>
            
                @if (PaginatedSongs != null && PaginatedSongs.Any())
                {
                    @foreach (var song in PaginatedSongs)
                    {
                        <tr>
                            <td>@(FilteredSongs.IndexOf(song) + 1)</td>
                            <td>@song.Name</td>
                            <td>@song.ArtistId</td>
                            <td>@DateTime.Now.ToShortDateString()</td>
                            <td>@song.Duration</td>
                            <td>
                                <button class="btn btn-success btn-sm" @onclick="() => PlaySong(song)">Play</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6">No songs found.</td>
                    </tr>
                }
                <script src="/Js/AudioPlayer.js"></script>
        </table>
    </div>

    <div class="PaginationControls">
        <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@IsFirstPage">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button @onclick="NextPage" class="btn btn-secondary" disabled="@IsLastPage">Next</button>
    </div>

    <div class="AudioPlayback">
        <audio id="audioPlayer" controls style="width: 100%;"></audio>
    </div>


@code {
    private Pancake_FinalContext context = default!;
    private string _searchQuery = "";
    private List<Song> Songs = new();
    private List<Song> FilteredSongs = new();
    private List<Song> PaginatedSongs = new();

    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredSongs.Count / PageSize);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private bool isLoading = false;

    private string SearchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                SearchSongs();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            context = await DbFactory.CreateDbContextAsync();
            Songs = await context.Song.ToListAsync();
            FilteredSongs = Songs;
            UpdatePagination();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private void SearchSongs()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredSongs = Songs;
        }
        else
        {
            FilteredSongs = Songs
                .Where(song => song.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        CurrentPage = 1;
        UpdatePagination();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            UpdatePagination();
            StateHasChanged();
        }
    }

    private void UpdatePagination()
    {
        PaginatedSongs = FilteredSongs
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();

        StateHasChanged();
    }

    private async Task PlaySong(Song song)
    {
        try
        {
            // Play the song using JavaScript
            await JSRuntime.InvokeVoidAsync("playAudio", song.FilePath);

            // Log the song in ListeningHistory
            var listeningHistory = new ListeningHistory
            {
                UserId = 1, // Replace with the actual user ID if you have authentication
                SongId = song.SongId,
                Name = song.Name,
                DateCreated = DateTime.UtcNow,
                DateUpdated = DateTime.UtcNow,
                CreatedBy = "System", // Replace with actual username
                UpdateBy = "System"   // Replace with actual username
            };

            context.ListeningHistory.Add(listeningHistory);
            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error playing song: {ex.Message}");
        }
    }
}
