// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pancake_Final.Data;

#nullable disable

namespace Pancake_Final.Migrations
{
    [DbContext(typeof(Pancake_FinalContext))]
    partial class Pancake_FinalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pancake_Final.Data.Pancake_FinalUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "774f79ec-8dcf-4cad-af37-52c1caa8dcdd",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHALKeGpDhCi7XEz2bWOSBvSv21TpPY26EVpUE/Ruv1/FsUBQQNWfEXNO07J3vtuqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8020f5d0-8689-46a4-9b82-0898c84332c7",
                            SubStatus = "Premium",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        });
                });

            modelBuilder.Entity("Pancake_Final.Domain.Album", b =>
                {
                    b.Property<int>("AlbumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumID"));

                    b.Property<byte>("AlbumImage")
                        .HasColumnType("tinyint");

                    b.Property<int>("ArtistID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlbumID");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Artists", b =>
                {
                    b.Property<int>("ArtistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("ArtistID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 12, 10, 50, 25, 105, DateTimeKind.Utc).AddTicks(1930),
                            DateUpdated = new DateTime(2025, 2, 12, 10, 50, 25, 105, DateTimeKind.Utc).AddTicks(1930),
                            GenreName = "Liked Songs",
                            Id = 1,
                            UpdateBy = "System"
                        });
                });

            modelBuilder.Entity("Pancake_Final.Domain.ListeningHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlayed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.ToTable("ListeningHistory");
                });

            modelBuilder.Entity("Pancake_Final.Domain.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<string>("CoverImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NewGenreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaylistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.HasIndex("GenreID");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Song", b =>
                {
                    b.Property<int?>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SongId"));

                    b.Property<int?>("AlbumID")
                        .HasColumnType("int");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("ArtistsArtistID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LikedS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.HasIndex("ArtistsArtistID");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Song");

                    b.HasData(
                        new
                        {
                            SongId = 1,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 103, DateTimeKind.Local).AddTicks(7959),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 103, DateTimeKind.Local).AddTicks(7967),
                            Duration = new TimeSpan(3634973333),
                            FilePath = "/music/(Blood Sweat & Tears) Official MV.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "(Blood Sweat & Tears) Official MV",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 2,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 103, DateTimeKind.Local).AddTicks(8856),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 103, DateTimeKind.Local).AddTicks(8857),
                            Duration = new TimeSpan(2491219166),
                            FilePath = "/music/(FREE) Lo-fi Type Beat - I Need a Girl.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "(FREE) Lo-fi Type Beat - I Need a Girl",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 3,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(411),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(413),
                            Duration = new TimeSpan(3286239166),
                            FilePath = "/music/(Spring Day) Official MV.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "(Spring Day) Official MV",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 4,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(1438),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(1439),
                            Duration = new TimeSpan(1577780833),
                            FilePath = "/music/6IX9INE - GUMMO (Official Audio) .mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "6IX9INE - GUMMO (Official Audio) ",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 5,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(2758),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(2762),
                            Duration = new TimeSpan(1584823333),
                            FilePath = "/music/6IX9INE - Kooda.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "6IX9INE - Kooda",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 6,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(3493),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(3494),
                            Duration = new TimeSpan(2012329166),
                            FilePath = "/music/88GLAM - Lil Boat (Lyrics).mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "88GLAM - Lil Boat (Lyrics)",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 7,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(4449),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(4450),
                            Duration = new TimeSpan(2683975000),
                            FilePath = "/music/Aiman Tino - Permata Cinta .mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "Aiman Tino - Permata Cinta ",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 8,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(5049),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(5050),
                            Duration = new TimeSpan(2126052500),
                            FilePath = "/music/[FULL] Fairy Tail OP 1 -Snow Fairy- OriginalEnglish.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "[FULL] Fairy Tail OP 1 -Snow Fairy- OriginalEnglish",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 9,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(5818),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(5818),
                            Duration = new TimeSpan(1868088333),
                            FilePath = "/music/[MV] - _ Some(썸 탈꺼야).mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "[MV] - _ Some(썸 탈꺼야)",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 10,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(6466),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(6467),
                            Duration = new TimeSpan(2270554166),
                            FilePath = "/music/[Official Video] JAM Project - THE HERO !! - One Punch Man Opening Theme ワンパンマン.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "[Official Video] JAM Project - THE HERO !! - One Punch Man Opening Theme ワンパンマン",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 11,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(7431),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(7432),
                            Duration = new TimeSpan(2948199166),
                            FilePath = "/music/_ FIRE (Official MV).mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "_ FIRE (Official MV)",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 12,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(8802),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(8804),
                            Duration = new TimeSpan(3297455000),
                            FilePath = "/music/❀Club2Tokyo❀ - Cold Eyes Warm Smile.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "❀Club2Tokyo❀ - Cold Eyes Warm Smile",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 13,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(9928),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 104, DateTimeKind.Local).AddTicks(9929),
                            Duration = new TimeSpan(1794272499),
                            FilePath = "/music/「Gotoubun no Kimochi」 - Quintessential Quintuplets .mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "「Gotoubun no Kimochi」 - Quintessential Quintuplets ",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 14,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 105, DateTimeKind.Local).AddTicks(805),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 105, DateTimeKind.Local).AddTicks(806),
                            Duration = new TimeSpan(3264850833),
                            FilePath = "/music/「Your Name」盾の勇者 の 成り上がり - Chiai Fujikawa.mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "「Your Name」盾の勇者 の 成り上がり - Chiai Fujikawa",
                            UpdateBy = "Seeder"
                        },
                        new
                        {
                            SongId = 15,
                            ArtistId = 1,
                            CreatedBy = "Seeder",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2025, 2, 12, 18, 50, 25, 105, DateTimeKind.Local).AddTicks(1650),
                            DateUpdated = new DateTime(2025, 2, 12, 18, 50, 25, 105, DateTimeKind.Local).AddTicks(1651),
                            Duration = new TimeSpan(36486149166),
                            FilePath = "/music/【BGM】 - Beautiful Piano Music .mp3",
                            GenID = 1,
                            Id = 0,
                            LikedS = "NotLiked",
                            Name = "【BGM】 - Beautiful Piano Music ",
                            UpdateBy = "Seeder"
                        });
                });

            modelBuilder.Entity("Pancake_Final.Domain.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<string>("SubPlans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubStatus")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Pancake_Final.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayListID")
                        .HasColumnType("int");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.Property<string>("SubStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pancake_Final.Data.Pancake_FinalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pancake_Final.Data.Pancake_FinalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pancake_Final.Data.Pancake_FinalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pancake_Final.Data.Pancake_FinalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pancake_Final.Domain.Playlist", b =>
                {
                    b.HasOne("Pancake_Final.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Song", b =>
                {
                    b.HasOne("Pancake_Final.Domain.Artists", null)
                        .WithMany("Songs")
                        .HasForeignKey("ArtistsArtistID");

                    b.HasOne("Pancake_Final.Domain.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Artists", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Pancake_Final.Domain.Playlist", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
